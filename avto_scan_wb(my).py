import os
import requests
import hashlib
from datetime import datetime, timedelta, date
from dotenv import load_dotenv
from textblob import TextBlob
import schedule
import time
from telegram import Bot
import smtplib
from email.mime.text import MIMEText

from google.oauth2 import service_account
from googleapiclient.discovery import build
from googleapiclient.http import MediaFileUpload

# ========== –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ==========
load_dotenv()

# --- Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ---
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID')

# --- Email (–Ø–Ω–¥–µ–∫—Å) –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ---
EMAIL_SMTP_SERVER = 'smtp.yandex.ru'
EMAIL_SMTP_PORT = 587

EMAIL_LOGIN = os.getenv('EMAIL_LOGIN')      # –í–∞—à –ª–æ–≥–∏–Ω –Ø–Ω–¥–µ–∫—Å.–ü–æ—á—Ç—ã
EMAIL_PASSWORD = os.getenv('EMAIL_PASSWORD')  # –ü–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

EMAIL_RECIPIENT = os.getenv('EMAIL_RECIPIENT')  # –ö–æ–º—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç—á—ë—Ç (–≤–∞—à email)

# --- Google Drive ---
SERVICE_ACCOUNT_FILE = os.getenv('GOOGLE_APPLICATION_CREDENTIALS', 'credentials.json')  # –ü—É—Ç—å –∫ JSON —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
GDRIVE_FOLDER_ID = os.getenv('GDRIVE_FOLDER_ID')  # ID –ø–∞–ø–∫–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ (–º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º)

# --- –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –±—Ä–∞–∫–∞/–¥–µ—Ñ–µ–∫—Ç–æ–≤ ---
DEFECT_KEYWORDS = ['–±—Ä–∞–∫', '–Ω–µ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π', '–ø–æ–ª–æ–º–∫–∞', '–¥–µ—Ñ–µ–∫—Ç', '–≤–æ–∑–≤—Ä–∞—Ç']

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞ ---
bot = Bot(token=TELEGRAM_BOT_TOKEN)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Drive API ---
SCOPES = ['https://www.googleapis.com/auth/drive.file']

credentials = service_account.Credentials.from_service_account_file(
    SERVICE_ACCOUNT_FILE,
    scopes=SCOPES
)
drive_service = build('drive', 'v3', credentials=credentials)

# --- –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –≤ Google Drive ---
def upload_report_to_gdrive(file_path, folder_id=None):
    file_metadata = {'name': os.path.basename(file_path)}
    if folder_id:
        file_metadata['parents'] = [folder_id]

    media = MediaFileUpload(file_path, mimetype='text/plain', resumable=True)

    try:
        file = drive_service.files().create(
            body=file_metadata,
            media_body=media,
            fields='id'
        ).execute()
        print(f"[INFO] –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Google Drive —Å ID: {file.get('id')}")
        return file.get('id')
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –≤ Google Drive: {e}")
        return None

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤ Wildberries (–ø–æ product_id) —á–µ—Ä–µ–∑ AJAX ---
def get_reviews_wb(product_id, max_pages=5):
    reviews = []
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 "
                      "(KHTML, like Gecko) Chrome/115.0 Safari/537.36",
        "Accept": "application/json, text/plain, */*",
    }

    for page in range(1, max_pages + 1):
        url = f"https://card.wb.ru/cards/detail?nm={product_id}&page={page}"
        try:
            response = requests.get(url, headers=headers, timeout=10)
            response.raise_for_status()
            data = response.json()

            reviews_data = data.get('data', {}).get('orders', {}).get('data', [])
            if not reviews_data:
                break

            for r in reviews_data:
                text = r.get('reviewText', '').strip()
                if not text:
                    continue

                review_id = f"wb_{product_id}_{r.get('reviewId', '')}"
                date_str = r.get('dateCreated')
                try:
                    review_date = datetime.fromisoformat(date_str)
                except:
                    review_date = datetime.utcnow()

                reviews.append({
                    'id': review_id,
                    'product_id': str(product_id),
                    'text': text,
                    'date': review_date,
                    'source': 'wildberries'
                })

            # –ï—Å–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –º–µ–Ω—å—à–µ 10 –æ—Ç–∑—ã–≤–æ–≤ ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∫–∞–Ω–∏—Ä—É–µ–º—ã–π –Ω–∞–±–æ—Ä
            if len(reviews_data) < 10:
                break

        except Exception as e:
            print(f"[ERROR] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤ —Ç–æ–≤–∞—Ä–∞ {product_id} —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}: {e}")
            break

    print(f"[INFO] –°–æ–±—Ä–∞–Ω–æ {len(reviews)} –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {product_id}")
    return reviews

# --- –ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ ---
def analyze_sentiment(text):
    polarity = TextBlob(text).sentiment.polarity
    if polarity > 0.1:
        return 'positive'
    elif polarity < -0.1:
        return 'negative'
    else:
        return 'neutral'

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—Ä–∞–∫–∞/–¥–µ—Ñ–µ–∫—Ç–∞ –≤ –æ—Ç–∑—ã–≤–µ ---
def contains_defect(text):
    text_lower = text.lower()
    return any(keyword in text_lower for keyword in DEFECT_KEYWORDS)

# --- –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram ---
def send_telegram_message(message):
    try:
        bot.send_message(chat_id=TELEGRAM_CHAT_ID, text=message)
        print("[INFO] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram.")
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")

# --- –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞ –ø–æ email —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å ---
def send_email_report(subject, body, recipient):
    try:
        msg = MIMEText(body, 'plain', 'utf-8')
        msg['Subject'] = subject
        msg['From'] = EMAIL_LOGIN
        msg['To'] = recipient

        with smtplib.SMTP(EMAIL_SMTP_SERVER, EMAIL_SMTP_PORT) as server:
            server.starttls()
            server.login(EMAIL_LOGIN, EMAIL_PASSWORD)
            server.sendmail(EMAIL_LOGIN, recipient, msg.as_string())
        print("[INFO] –û—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ email.")
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: {e}")

# --- –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ (–∞—Ä—Ç–∏–∫—É–ª—ã) –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ ---
PRODUCTS = [
    306924358,
    396066853,
    396226161,
    306929853,
    306927225
]

# --- –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å: —Å–±–æ—Ä, –∞–Ω–∞–ª–∏–∑, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ---
def process_and_collect_reviews():
    all_reviews = []
    defects_found = []

    for product_id in PRODUCTS:
        reviews = get_reviews_wb(product_id)
        for r in reviews:
            sentiment = analyze_sentiment(r['text'])
            r['sentiment'] = sentiment
            all_reviews.append(r)
            if sentiment == 'negative' and contains_defect(r['text']):
                defects_found.append(r)
    return all_reviews, defects_found

# --- –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á—ë—Ç–∞ ---
def generate_report(all_reviews):
    total = len(all_reviews)
    positive = sum(r['sentiment'] == 'positive' for r in all_reviews)
    neutral = sum(r['sentiment'] == 'neutral' for r in all_reviews)
    negative = sum(r['sentiment'] == 'negative' for r in all_reviews)

    report = (
        f"üìÖ –û—Ç—á—ë—Ç –ø–æ –æ—Ç–∑—ã–≤–∞–º Wildberries (—Ç–µ–∫—É—â–∏–π –∑–∞–ø—É—Å–∫):\n"
        f"–í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: {total}\n"
        f"–ü–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö: {positive}\n"
        f"–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã—Ö: {neutral}\n"
        f"–ù–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö: {negative}\n"
    )
    return report

# --- –ó–∞–¥–∞—á–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ ---
def daily_job():
    print(f"[{datetime.utcnow()}] –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∑—ã–≤–æ–≤ Wildberries...")
    all_reviews, defects = process_and_collect_reviews()

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–µ–≤–æ–≥ –ø–æ –±—Ä–∞–∫—É –≤ Telegram
    for d in defects:
        message = (
            f"‚ö†Ô∏è –ñ–∞–ª–æ–±–∞ –Ω–∞ –±—Ä–∞–∫!\n"
            f"ID: {d['id']}\n"
            f"–¢–æ–≤–∞—Ä: {d['product_id']}\n"
            f"–î–∞—Ç–∞: {d['date'].strftime('%Y-%m-%d %H:%M') if isinstance(d['date'], datetime) else d['date']}\n"
            f"–¢–µ–∫—Å—Ç: {d['text']}"
        )
        send_telegram_message(message)

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á—ë—Ç–∞
    report = generate_report(all_reviews)

    send_telegram_message(report)
    send_email_report('–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç Wildberries', report, EMAIL_RECIPIENT)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á—ë—Ç–∞ –≤ —Ñ–∞–π–ª –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ Google Drive
    filename = f"wildberries_report_{datetime.utcnow().strftime('%Y%m%d_%H%M%S')}.txt"
    with open(filename, 'w', encoding='utf-8') as f:
        f.write(report)

    upload_report_to_gdrive(filename, GDRIVE_FOLDER_ID)

# --- –ó–∞–¥–∞—á–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞ (–º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –∑–∞–ø—É—Å–∫–∞—Ç—å daily_job) ---
def weekly_report():
    print(f"[{datetime.utcnow()}] –ó–∞–ø—É—Å–∫ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞...")
    daily_job()

# --- –ó–∞–¥–∞—á–∞ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–∞—Ç—ã ---
def monthly_report():
    today = date.today()
    if today.day == 1:
        print(f"[{datetime.utcnow()}] –ó–∞–ø—É—Å–∫ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞...")
        daily_job()
    else:
        print(f"[{datetime.utcnow()}] –°–µ–≥–æ–¥–Ω—è –Ω–µ –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ ‚Äî –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –æ—Ç—á—ë—Ç –ø—Ä–æ–ø—É—â–µ–Ω.")

# --- –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ ---
schedule.every().day.at("10:00").do(daily_job)
schedule.every().monday.at("10:05").do(weekly_report)
schedule.every().day.at("10:10").do(monthly_report)  # –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å, –≤–Ω—É—Ç—Ä–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –¥–∞—Ç–∞

if __name__ == "__main__":
    print("[INFO] –ó–∞–ø—É—â–µ–Ω —Å–∫—Ä–∏–ø—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∑—ã–≤–æ–≤ Wildberries.")
    while True:
        schedule.run_pending()
        time.sleep(60)
